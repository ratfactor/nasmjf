    Now we can start fleshing out this Forth implementation
    with some basic words. I'll start with the stack manipulation
    words as defined in assembly (for speed) in JonesFORTH:

        ; drop top of stack
        DEFCODE "DROP",4,,DROP
        pop eax
        NEXT

    I'll test each one out as I go. Here's DROP:

65 EMIT
A
65 66 67
DROP EMIT
B
EMIT
A

    Good, it dropped 67 ('c') from the top of the stack.

    And swap:

        ; swap top two elements
        DEFCODE "SWAP",4,,SWAP
        pop eax
        pop ebx
        push eax
        push ebx
        NEXT

    Which is easy to test:

65 66 EMIT EMIT
BA
65 66 SWAP EMIT EMIT
AB

    Finally,

        ; duplicate element on top of stack
        DEFCODE "DUP",3,,DUP
        mov eax, [esp]
        push eax
        NEXT

65 DUP 66 DUP EMIT EMIT EMIT EMIT
BBAA

    Awesome.

    Next night: okay I've ported over OVER, ROT, -ROT, 
    2DROP, 2DUP, 2SWAP, and ?DUP. I'll just test them all
    at once and won't bother with the source - they're
    as simple as the above - so it's really easy to read
    their assembly definitions in the source file.

: A 65 ;
A EMIT
A
: B 66 ;
: C 67 ;
: D 68 ;
: e EMIT ;
A B C D e e e e
DCBA
A B C OVER e e e e
BCBA
A B C ROT e e e
ACB
A B C -ROT e e e
BAC
A B C D DROP e e e
CBA
A B C D 2DROP e e
BA
A B C D 2SWAP e e e e
BADC
A B ?DUP e e e
BBA
A B 0 ?DUP e e e

Program received signal SIGSEGV, Segmentation fault.
_FIND.test_word () at nasmjf.asm:532
532         mov al, [edx+4]           ; al = flags+length field
(gdb)

    LOL, well, ?DUP is a little hard to test compared
    to the others. Though a segfault for trying to print
    an ASCII NUL seems weird, and is GDB telling me it
    crashed in FIND? Hmm. I'll have to keep an eye on that.

    The next series of words to define in assembly are
    math operators, which is great. But I think I'm going
    to need to be able to display numbers before that'll
    be any fun to test...
