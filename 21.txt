    The last log saw yet _another_ bug in my DEFVAR macro.
    Sheesh. Hopefully I have variables working correctly
    now?

    As I mentioned last night, the next words look like a
    real mixture of things. Let's jump into it:

    WITHIN is a conditional that tests if a number is
    between two other numbers. This highlights the advantage
    of such a flexible language (and the simplicity of the
    syntax). I'll format this slightly to make a bit of a
    truth table out of it to demonstrate how within works:

1 2 3 WITHIN .  0
2 3 1 WITHIN .  0
3 1 2 WITHIN .  0
2 1 3 WITHIN .  1  <-- 2 is within 1 and 3

    DEPTH gives us the depth of the stack:

1 2
.S
2 1
DEPTH .
8

    Huh? Oh, it's in bytes, not number of items!

    ALIGNED rounds a number up to the next multiple of 4,
    which aligns addresses on 32-bit (4 byte) computers.
    It's easy to test:
   
1 ALIGNED .
4
7 ALIGNED .
8

    ALIGN performs ALIGNED on HERE. Here's the definition.

        : ALIGN HERE @ ALIGNED HERE ! ;

    I have a sense for when this would be used while
    compiling, but don't really feel like trying to make up
    a test for it. I'm content to see how it's used later
    and test *that*.

    And now, the moment we've all been waiting for: strings!

    Numbers are great and all, but most of what I do
    involves strings in one way or another and if I'd had my
    way, they'd have gotten absolute priority.

    Can't wait to try 'em!
